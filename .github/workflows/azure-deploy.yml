name: üöÄ Deploy Kawoukeravore to Azure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  AZURE_WEBAPP_NAME: kawoukeraotop-erh8hzcxhwawhtb7
  AZURE_WEBAPP_PACKAGE_PATH: './apps/api'
  NODE_VERSION: '18.x'
  AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}

jobs:
  # Job 1: Build et Test
  build-and-test:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: üìÇ Checkout code
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üì¶ Install dependencies
      run: |
        npm ci
        cd apps/web && npm ci
        cd ../api && npm ci
        
    - name: üî® Build frontend
      run: npm run build
      
    - name: üß™ Run tests (if available)
      run: |
        # npm test
        echo "Tests will be added here"
        
    - name: üìÅ Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: apps/web/dist/
        retention-days: 1
        
    - name: üìÅ Upload API artifacts  
      uses: actions/upload-artifact@v4
      with:
        name: api-build
        path: |
          apps/api/
          !apps/api/node_modules/
        retention-days: 1

  # Job 2: Deploy Infrastructure (Bicep)
  deploy-infrastructure:
    name: üèóÔ∏è Deploy Azure Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    outputs:
      webAppName: ${{ steps.deploy.outputs.webAppName }}
      staticWebAppName: ${{ steps.deploy.outputs.staticWebAppName }}
    
    steps:
    - name: üìÇ Checkout code
      uses: actions/checkout@v4
      
    - name: üîê Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: üîç Create Resource Group if not exists
      run: |
        if ! az group show --name kawoukeravore-rg-prod &>/dev/null; then
          echo "Creating resource group kawoukeravore-rg-prod..."
          az group create --name kawoukeravore-rg-prod --location "West Europe"
        else
          echo "Resource group kawoukeravore-rg-prod already exists"
        fi
        
    - name: ‚úÖ Validate Bicep template
      run: |
        az deployment group validate \
          --resource-group kawoukeravore-rg-prod \
          --template-file ./azure-infrastructure.bicep \
          --parameters ./azure-infrastructure.parameters.json
        
    - name: üèóÔ∏è Deploy Bicep template
      id: deploy
      uses: azure/arm-deploy@v2
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: kawoukeravore-rg-prod
        template: ./azure-infrastructure.bicep
        parameters: ./azure-infrastructure.parameters.json
        failOnStdErr: false
        deploymentMode: Incremental
        deploymentName: 'kawoukeravore-infrastructure-${{ github.run_number }}'

  # Job 3: Deploy API to App Service
  deploy-api:
    name: üîß Deploy API to Azure App Service
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üìÇ Download API artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-build
        path: ./api/
        
    - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: üì¶ Install production dependencies
      run: |
        cd api
        npm ci --production --verbose
        echo "Dependencies installed successfully"
        
    - name: üîê Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: üîç Verify App Service exists
      run: |
        if ! az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group kawoukeravore-rg-prod &>/dev/null; then
          echo "‚ùå App Service ${{ env.AZURE_WEBAPP_NAME }} not found!"
          echo "Waiting for infrastructure deployment to complete..."
          sleep 60
        fi
        
    - name: üöÄ Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ./api
        startup-command: 'npm start'
        
    - name: üîÑ Restart App Service
      run: |
        echo "Restarting App Service to ensure clean deployment..."
        az webapp restart --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group kawoukeravore-rg-prod
        
    - name: üîß Configure App Settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        app-settings-json: |
          [
            {
              "name": "NODE_ENV",
              "value": "production"
            },
            {
              "name": "PORT", 
              "value": "8000"
            },
            {
              "name": "FRONTEND_URL",
              "value": "https://kawoukeravore-frontend-prod.azurestaticapps.net"
            },
            {
              "name": "MICROSOFT_CLIENT_ID",
              "value": "${{ secrets.MICROSOFT_CLIENT_ID }}"
            },
            {
              "name": "MICROSOFT_CLIENT_SECRET", 
              "value": "${{ secrets.MICROSOFT_CLIENT_SECRET }}"
            },
            {
              "name": "MICROSOFT_TENANT_ID",
              "value": "${{ secrets.MICROSOFT_TENANT_ID }}"
            },
            {
              "name": "WHATSAPP_VERIFY_TOKEN",
              "value": "${{ secrets.WHATSAPP_VERIFY_TOKEN }}"
            },
            {
              "name": "WHATSAPP_ACCESS_TOKEN",
              "value": "${{ secrets.WHATSAPP_ACCESS_TOKEN }}"
            },
            {
              "name": "JWT_SECRET",
              "value": "${{ secrets.JWT_SECRET }}"
            }
          ]

  # Job 4: Deploy Frontend to Static Web Apps
  deploy-frontend:
    name: üåê Deploy Frontend to Azure Static Web Apps
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üìÇ Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        
    - name: üöÄ Deploy to Azure Static Web Apps
      id: builddeploy
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/apps/web"
        api_location: ""
        output_location: "dist"
        app_build_command: "npm run build"
        
  # Job 5: Health Check et Tests Post-D√©ploiement  
  post-deployment-tests:
    name: üß™ Post-Deployment Health Checks
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: ‚è≥ Wait for deployment stabilization
      run: |
        echo "‚è≥ Waiting 2 minutes for services to stabilize..."
        sleep 120
    
    - name: üîç Health Check API (with retry)
      run: |
        echo "üîç Testing API health endpoint..."
        for i in {1..5}; do
          if curl -f -s --max-time 30 https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health; then
            echo "‚úÖ API health check passed on attempt $i"
            break
          else
            echo "‚ö†Ô∏è  API health check failed on attempt $i, retrying..."
            sleep 30
            if [ $i -eq 5 ]; then
              echo "‚ùå API health check failed after 5 attempts"
              exit 1
            fi
          fi
        done
        
    - name: üåê Health Check Frontend (with retry)
      run: |
        echo "üîç Testing frontend accessibility..."
        for i in {1..5}; do
          if curl -f -s --max-time 30 https://kawoukeravore-frontend-prod.azurestaticapps.net; then
            echo "‚úÖ Frontend accessibility check passed on attempt $i"
            break
          else
            echo "‚ö†Ô∏è  Frontend check failed on attempt $i, retrying..."
            sleep 30
            if [ $i -eq 5 ]; then
              echo "‚ùå Frontend check failed after 5 attempts"
              exit 1
            fi
          fi
        done
        
    - name: üìä Performance Test (Basic)
      run: |
        echo "üìä Running basic performance tests..."
        
        # Test API performance
        echo "Testing API response time..."
        API_TIME=$(curl -w "%{time_total}" -o /dev/null -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health)
        echo "API response time: ${API_TIME}s"
        
        # Test Frontend performance  
        echo "Testing Frontend load time..."
        FRONTEND_TIME=$(curl -w "%{time_total}" -o /dev/null -s https://kawoukeravore-frontend-prod.azurestaticapps.net)
        echo "Frontend load time: ${FRONTEND_TIME}s"
        
        echo "‚úÖ Performance tests completed!"
        
    - name: üîç API Endpoints Test
      run: |
        echo "üîç Testing API endpoints..."
        
        # Test API root
        curl -f -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/ || echo "‚ö†Ô∏è  API root endpoint not accessible"
        
        # Test CORS
        curl -H "Origin: https://kawoukeravore-frontend-prod.azurestaticapps.net" \
             -H "Access-Control-Request-Method: GET" \
             -H "Access-Control-Request-Headers: X-Requested-With" \
             -X OPTIONS \
             https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health || echo "‚ö†Ô∏è  CORS not properly configured"
        
        echo "‚úÖ API endpoints test completed!"

  # Job 6: Notification
  notify-deployment:
    name: üì¢ Deployment Notification
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    if: always()
    
    steps:
    - name: üéâ Success Notification
      if: needs.post-deployment-tests.result == 'success'
      run: |
        echo "üéâ Kawoukeravore successfully deployed to Azure!"
        echo "üåê Frontend: https://kawoukeravore-frontend-prod.azurestaticapps.net"
        echo "üîß API: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "üìä Health: All services operational"
        
    - name: ‚ùå Failure Notification
      if: needs.post-deployment-tests.result == 'failure'
      run: |
        echo "‚ùå Deployment failed. Please check the logs."
        exit 1