# üöÄ Script de d√©ploiement Azure pour Kawoukeravore
# Usage: .\azure-deploy.ps1 [-Environment prod|staging] [-ResourceGroup nom]

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("prod", "staging")]
    [string]$Environment = "prod",
    
    [Parameter(Mandatory=$false)]
    [string]$ResourceGroup = "kawoukeravore-rg-$Environment",
    
    [Parameter(Mandatory=$false)]
    [string]$Location = "West Europe",
    
    [Parameter(Mandatory=$false)]
    [switch]$InfrastructureOnly,
    
    [Parameter(Mandatory=$false)]
    [switch]$AppOnly,
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipBuild
)

# Configuration
$ProjectName = "kawoukeravore"
$SubscriptionId = $env:AZURE_SUBSCRIPTION_ID
$BicepTemplate = "./azure-infrastructure.bicep"
$ParametersFile = "./azure-infrastructure.parameters.json"

# Couleurs PowerShell
function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    
    if ($args) {
        Write-Output $args
    } else {
        $input | Write-Output
    }
    
    $host.UI.RawUI.ForegroundColor = $fc
}

function Write-Info($message) { Write-ColorOutput Green "‚ÑπÔ∏è  $message" }
function Write-Warning($message) { Write-ColorOutput Yellow "‚ö†Ô∏è  $message" }
function Write-Error($message) { Write-ColorOutput Red "‚ùå $message" }
function Write-Success($message) { Write-ColorOutput Green "‚úÖ $message" }
function Write-Step($message) { Write-ColorOutput Cyan "üîÑ $message" }

Write-Info "üå¥ D√©marrage du d√©ploiement Kawoukeravore sur Azure"
Write-Info "üìç Environnement: $Environment"
Write-Info "üì¶ Resource Group: $ResourceGroup"
Write-Info "üåç R√©gion: $Location"
Write-Host ""

# V√©rification des pr√©requis
Write-Step "V√©rification des pr√©requis Azure..."

try {
    # V√©rifier Azure CLI
    $azVersion = az version --output json | ConvertFrom-Json
    Write-Info "‚úÖ Azure CLI version: $($azVersion.'azure-cli')"
} catch {
    Write-Error "Azure CLI n'est pas install√©. Installez-le depuis: https://aka.ms/installazurecliwindows"
    exit 1
}

try {
    # V√©rifier la connexion Azure
    $account = az account show --output json | ConvertFrom-Json
    Write-Info "‚úÖ Connect√© √† Azure: $($account.user.name)"
    Write-Info "üìã Subscription: $($account.name) ($($account.id))"
} catch {
    Write-Error "Non connect√© √† Azure. Ex√©cutez: az login"
    exit 1
}

# V√©rifier Node.js
try {
    $nodeVersion = node --version
    Write-Info "‚úÖ Node.js version: $nodeVersion"
} catch {
    Write-Error "Node.js n'est pas install√©"
    exit 1
}

# V√©rifier npm
try {
    $npmVersion = npm --version
    Write-Info "‚úÖ npm version: $npmVersion"
} catch {
    Write-Error "npm n'est pas disponible"
    exit 1
}

Write-Success "Pr√©requis valid√©s"
Write-Host ""

# Build de l'application (si pas skip)
if (-not $SkipBuild -and -not $InfrastructureOnly) {
    Write-Step "Build de l'application Kawoukeravore..."
    
    Write-Info "üì¶ Installation des d√©pendances..."
    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-Error "√âchec de l'installation des d√©pendances"
        exit 1
    }
    
    Write-Info "üèóÔ∏è Build du frontend React..."
    npm run build
    if ($LASTEXITCODE -ne 0) {
        Write-Error "√âchec du build frontend"
        exit 1
    }
    
    Write-Success "Build termin√© avec succ√®s"
    Write-Host ""
}

# Cr√©ation du Resource Group
Write-Step "Cr√©ation/V√©rification du Resource Group..."
$rgExists = az group exists --name $ResourceGroup
if ($rgExists -eq "false") {
    Write-Info "Cr√©ation du Resource Group: $ResourceGroup"
    az group create --name $ResourceGroup --location $Location --tags Environment=$Environment Project=$ProjectName
    if ($LASTEXITCODE -ne 0) {
        Write-Error "√âchec de la cr√©ation du Resource Group"
        exit 1
    }
} else {
    Write-Info "Resource Group existant: $ResourceGroup"
}

# D√©ploiement de l'infrastructure (si pas AppOnly)
if (-not $AppOnly) {
    Write-Step "D√©ploiement de l'infrastructure Azure avec Bicep..."
    
    # Mise √† jour des param√®tres
    $parameters = Get-Content $ParametersFile | ConvertFrom-Json
    $parameters.parameters.environment.value = $Environment
    $parameters.parameters.location.value = $Location
    $parameters | ConvertTo-Json -Depth 10 | Set-Content $ParametersFile
    
    Write-Info "üöÄ D√©ploiement du template Bicep..."
    $deployment = az deployment group create `
        --resource-group $ResourceGroup `
        --template-file $BicepTemplate `
        --parameters $ParametersFile `
        --output json | ConvertFrom-Json
        
    if ($LASTEXITCODE -ne 0) {
        Write-Error "√âchec du d√©ploiement de l'infrastructure"
        exit 1
    }
    
    # R√©cup√©rer les outputs
    $webAppName = $deployment.properties.outputs.webAppName.value
    $staticWebAppName = $deployment.properties.outputs.staticWebAppName.value
    $webAppUrl = $deployment.properties.outputs.webAppUrl.value
    $staticWebAppUrl = $deployment.properties.outputs.staticWebAppUrl.value
    
    Write-Success "Infrastructure d√©ploy√©e avec succ√®s"
    Write-Info "üîß Web App: $webAppName"
    Write-Info "üåê Static Web App: $staticWebAppName"
    Write-Host ""
}

# D√©ploiement de l'application (si pas InfrastructureOnly)
if (-not $InfrastructureOnly) {
    # R√©cup√©rer les noms des ressources si pas d√©j√† fait
    if (-not $webAppName) {
        $webAppName = "$ProjectName-api-$Environment"
        $staticWebAppName = "$ProjectName-frontend-$Environment"
    }
    
    Write-Step "D√©ploiement de l'API sur App Service..."
    
    # Pr√©parer le package API
    Write-Info "üì¶ Pr√©paration du package API..."
    $tempDir = "temp-deploy-api"
    if (Test-Path $tempDir) {
        Remove-Item $tempDir -Recurse -Force
    }
    
    Copy-Item "apps/api" $tempDir -Recurse
    Push-Location $tempDir
    
    # Installation des d√©pendances de production
    Write-Info "üì¶ Installation des d√©pendances de production..."
    npm ci --production
    if ($LASTEXITCODE -ne 0) {
        Write-Error "√âchec de l'installation des d√©pendances de production"
        Pop-Location
        exit 1
    }
    
    Pop-Location
    
    # D√©ploiement sur App Service
    Write-Info "üöÄ D√©ploiement vers App Service: $webAppName"
    az webapp deployment source config-zip `
        --resource-group $ResourceGroup `
        --name $webAppName `
        --src "$tempDir.zip"
        
    # Cr√©er le zip
    Compress-Archive -Path "$tempDir/*" -DestinationPath "$tempDir.zip" -Force
    
    # Deploy
    az webapp deployment source config-zip `
        --resource-group $ResourceGroup `
        --name $webAppName `
        --src "$tempDir.zip"
        
    if ($LASTEXITCODE -ne 0) {
        Write-Error "√âchec du d√©ploiement de l'API"
        exit 1
    }
    
    # Nettoyage
    Remove-Item $tempDir -Recurse -Force
    Remove-Item "$tempDir.zip" -Force
    
    Write-Success "API d√©ploy√©e avec succ√®s"
    Write-Host ""
}

# Tests de sant√©
Write-Step "Tests de sant√© des services..."

if ($webAppUrl) {
    Write-Info "üîç Test de l'API..."
    try {
        $response = Invoke-RestMethod -Uri "$webAppUrl/api/health" -TimeoutSec 30
        Write-Success "‚úÖ API op√©rationnelle"
    } catch {
        Write-Warning "‚ö†Ô∏è  API peut ne pas √™tre encore pr√™te"
    }
}

if ($staticWebAppUrl) {
    Write-Info "üîç Test du frontend..."
    try {
        $response = Invoke-WebRequest -Uri $staticWebAppUrl -TimeoutSec 30
        if ($response.StatusCode -eq 200) {
            Write-Success "‚úÖ Frontend accessible"
        }
    } catch {
        Write-Warning "‚ö†Ô∏è  Frontend peut ne pas √™tre encore pr√™t"
    }
}

# R√©sum√© final
Write-Host ""
Write-Success "üéâ D√©ploiement Kawoukeravore termin√© avec succ√®s!"
Write-Host ""
Write-Info "üì± URLs de votre application:"
if ($webAppUrl) { Write-Info "   üîß API: $webAppUrl" }
if ($staticWebAppUrl) { Write-Info "   üåê Frontend: $staticWebAppUrl" }
Write-Host ""
Write-Info "üõ†Ô∏è Gestion des ressources:"
Write-Info "   üìã Resource Group: $ResourceGroup"
Write-Info "   üåç R√©gion: $Location"
Write-Info "   üè∑Ô∏è Environnement: $Environment"
Write-Host ""
Write-Info "üìä Commandes utiles:"
Write-Info "   az webapp log tail --name $webAppName --resource-group $ResourceGroup"
Write-Info "   az webapp browse --name $webAppName --resource-group $ResourceGroup"
Write-Host ""
Write-Info "üå¥ Votre plateforme culturelle guadeloup√©enne est en ligne!"