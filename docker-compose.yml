# 🐳 Docker Compose pour Kawoukeravore - Développement et test Azure
version: '3.8'

services:
  # API Backend
  kawoukeravore-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        BUILD_VERSION: ${BUILD_VERSION:-dev}
    image: kawoukeravore:${BUILD_VERSION:-dev}
    container_name: kawoukeravore-api-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=4000
      - FRONTEND_URL=http://localhost:5173
      - API_URL=http://localhost:4000/api
      - CORS_ORIGIN=http://localhost:5173
      # Variables à définir dans .env
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      - MICROSOFT_TENANT_ID=${MICROSOFT_TENANT_ID}
      - WHATSAPP_VERIFY_TOKEN=${WHATSAPP_VERIFY_TOKEN}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_not_for_production}
      - LOG_LEVEL=debug
    ports:
      - "4000:4000"
    volumes:
      # Logs persistants
      - ./logs:/app/logs
      # Configuration de développement
      - ./apps/api/.env:/app/api/.env:ro
    networks:
      - kawoukeravore-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => { process.exit(1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kawoukeravore-api.rule=PathPrefix(`/api`)"
      - "traefik.http.services.kawoukeravore-api.loadbalancer.server.port=4000"

  # Frontend Dev Server (optionnel pour test)
  kawoukeravore-frontend:
    image: node:18-alpine
    container_name: kawoukeravore-frontend-dev
    working_dir: /app/apps/web
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    environment:
      - VITE_API_URL=http://localhost:4000/api
      - VITE_NODE_ENV=development
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/web/node_modules
    networks:
      - kawoukeravore-network
    depends_on:
      - kawoukeravore-api
    profiles:
      - dev-full

  # Nginx pour servir les fichiers statiques (simulation Azure)
  nginx:
    image: nginx:alpine
    container_name: kawoukeravore-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./apps/web/dist:/usr/share/nginx/html:ro
      - ./nginx-docker.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - kawoukeravore-network
    depends_on:
      - kawoukeravore-api
    profiles:
      - production-test
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`localhost`)"

  # Redis pour le cache (optionnel, simulation Azure Redis)
  redis:
    image: redis:7-alpine
    container_name: kawoukeravore-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dev_password}
    networks:
      - kawoukeravore-network
    profiles:
      - with-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring avec Prometheus (simulation Azure Monitor)
  prometheus:
    image: prom/prometheus:latest
    container_name: kawoukeravore-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - kawoukeravore-network
    profiles:
      - monitoring

# Volumes persistants
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local

# Réseau interne
networks:
  kawoukeravore-network:
    driver: bridge
    name: kawoukeravore-net