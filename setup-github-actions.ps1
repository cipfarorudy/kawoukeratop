# Configuration automatis√©e des secrets GitHub pour Kawoukeravore
# Ce script configure tous les √©l√©ments n√©cessaires pour GitHub Actions

param(
    [Parameter(Mandatory=$true)]
    [string]$GitHubToken,
    
    [Parameter(Mandatory=$true)]
    [string]$AzureSubscriptionId,
    
    [Parameter(Mandatory=$false)]
    [string]$ResourceGroupName = "kawoukeravore-rg-prod",
    
    [Parameter(Mandatory=$false)]
    [string]$Location = "West Europe",
    
    [Parameter(Mandatory=$false)]
    [string]$GitHubRepo = "cipfarorudy/kawoukeravore"
)

Write-Host "üöÄ Configuration GitHub Actions pour Kawoukeravore" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green

# V√©rifier si Azure CLI est install√©
try {
    $azVersion = az version --output table 2>$null
    Write-Host "‚úÖ Azure CLI install√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Azure CLI non install√©. Veuillez l'installer : https://aka.ms/installazurecliwindows" -ForegroundColor Red
    exit 1
}

# V√©rifier si GitHub CLI est install√©
try {
    $ghVersion = gh version 2>$null
    Write-Host "‚úÖ GitHub CLI install√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå GitHub CLI non install√©. Veuillez l'installer : https://cli.github.com/" -ForegroundColor Red
    exit 1
}

# Connexion √† Azure
Write-Host "üîê Connexion √† Azure..." -ForegroundColor Yellow
try {
    az login --output none
    az account set --subscription $AzureSubscriptionId
    Write-Host "‚úÖ Connect√© √† Azure (Subscription: $AzureSubscriptionId)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå √âchec de connexion √† Azure" -ForegroundColor Red
    exit 1
}

# Connexion √† GitHub
Write-Host "üîê Connexion √† GitHub..." -ForegroundColor Yellow
try {
    echo $GitHubToken | gh auth login --with-token
    Write-Host "‚úÖ Connect√© √† GitHub" -ForegroundColor Green
} catch {
    Write-Host "‚ùå √âchec de connexion √† GitHub. V√©rifiez votre token." -ForegroundColor Red
    exit 1
}

# Cr√©er le Resource Group
Write-Host "üìÅ Cr√©ation du Resource Group..." -ForegroundColor Yellow
try {
    $rgExists = az group exists --name $ResourceGroupName
    if ($rgExists -eq "false") {
        az group create --name $ResourceGroupName --location $Location --output none
        Write-Host "‚úÖ Resource Group '$ResourceGroupName' cr√©√©" -ForegroundColor Green
    } else {
        Write-Host "‚ÑπÔ∏è  Resource Group '$ResourceGroupName' existe d√©j√†" -ForegroundColor Cyan
    }
} catch {
    Write-Host "‚ùå √âchec de cr√©ation du Resource Group" -ForegroundColor Red
    exit 1
}

# Cr√©er le Service Principal pour GitHub Actions
Write-Host "üë§ Cr√©ation du Service Principal..." -ForegroundColor Yellow
try {
    $spName = "kawoukeravore-github-actions-sp"
    $scope = "/subscriptions/$AzureSubscriptionId/resourceGroups/$ResourceGroupName"
    
    # V√©rifier si le SP existe d√©j√†
    $existingSp = az ad sp list --display-name $spName --query "[0].appId" -o tsv
    
    if ([string]::IsNullOrEmpty($existingSp)) {
        $spCredentials = az ad sp create-for-rbac --name $spName --role "Contributor" --scopes $scope --json-auth
        Write-Host "‚úÖ Service Principal cr√©√©" -ForegroundColor Green
    } else {
        Write-Host "‚ÑπÔ∏è  Service Principal existe d√©j√†, g√©n√©ration de nouvelles credentials..." -ForegroundColor Cyan
        $spCredentials = az ad sp create-for-rbac --name $spName --role "Contributor" --scopes $scope --json-auth
    }
    
    # Parser les credentials
    $credentials = $spCredentials | ConvertFrom-Json
    
    Write-Host "üìù Credentials g√©n√©r√©es pour le Service Principal" -ForegroundColor Green
} catch {
    Write-Host "‚ùå √âchec de cr√©ation du Service Principal" -ForegroundColor Red
    exit 1
}

# Cr√©er Static Web App pour obtenir le token
Write-Host "üåê Cr√©ation du Static Web App..." -ForegroundColor Yellow
try {
    $swaName = "kawoukeravore-frontend-prod"
    $swaExists = az staticwebapp show --name $swaName --resource-group $ResourceGroupName 2>$null
    
    if ($null -eq $swaExists) {
        $swa = az staticwebapp create --name $swaName --resource-group $ResourceGroupName --source "https://github.com/$GitHubRepo" --location "West Europe" --branch "main" --app-location "/apps/web" --output-location "dist" --login-with-github
        Write-Host "‚úÖ Static Web App cr√©√©" -ForegroundColor Green
    } else {
        Write-Host "‚ÑπÔ∏è  Static Web App existe d√©j√†" -ForegroundColor Cyan
        $swa = $swaExists
    }
    
    # Obtenir le token de d√©ploiement
    $swaToken = az staticwebapp secrets list --name $swaName --resource-group $ResourceGroupName --query "properties.apiKey" -o tsv
    Write-Host "üìù Token Static Web App r√©cup√©r√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå √âchec de cr√©ation du Static Web App" -ForegroundColor Red
    Write-Host "‚ÑπÔ∏è  Vous pourrez le cr√©er manuellement et ajouter le token plus tard" -ForegroundColor Cyan
    $swaToken = "MANUAL_CONFIGURATION_REQUIRED"
}

# G√©n√©rer un JWT Secret
$jwtSecret = [System.Web.Security.Membership]::GeneratePassword(32, 8)
Write-Host "üîê JWT Secret g√©n√©r√©" -ForegroundColor Green

# Configurer les secrets GitHub
Write-Host "üîß Configuration des secrets GitHub..." -ForegroundColor Yellow

$secrets = @{
    "AZURE_CREDENTIALS" = $spCredentials
    "AZURE_SUBSCRIPTION_ID" = $AzureSubscriptionId
    "AZURE_STATIC_WEB_APPS_API_TOKEN" = $swaToken
    "JWT_SECRET" = $jwtSecret
}

foreach ($secretName in $secrets.Keys) {
    try {
        $secretValue = $secrets[$secretName]
        gh secret set $secretName --body $secretValue --repo $GitHubRepo
        Write-Host "‚úÖ Secret '$secretName' configur√©" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå √âchec de configuration du secret '$secretName'" -ForegroundColor Red
    }
}

# G√©n√©rer un rapport de configuration
Write-Host ""
Write-Host "üìä RAPPORT DE CONFIGURATION" -ForegroundColor Cyan
Write-Host "============================" -ForegroundColor Cyan
Write-Host "‚úÖ Resource Group: $ResourceGroupName" -ForegroundColor Green
Write-Host "‚úÖ Service Principal: $spName" -ForegroundColor Green
Write-Host "‚úÖ Static Web App: $swaName" -ForegroundColor Green
Write-Host "‚úÖ GitHub Repository: $GitHubRepo" -ForegroundColor Green
Write-Host ""

Write-Host "üîê SECRETS CONFIGUR√âS:" -ForegroundColor Cyan
Write-Host "‚Ä¢ AZURE_CREDENTIALS ‚úÖ"
Write-Host "‚Ä¢ AZURE_SUBSCRIPTION_ID ‚úÖ" 
Write-Host "‚Ä¢ AZURE_STATIC_WEB_APPS_API_TOKEN ‚úÖ"
Write-Host "‚Ä¢ JWT_SECRET ‚úÖ"
Write-Host ""

Write-Host "‚ö†Ô∏è  SECRETS OPTIONNELS √Ä AJOUTER MANUELLEMENT:" -ForegroundColor Yellow
Write-Host "‚Ä¢ MICROSOFT_CLIENT_ID (pour l'auth Microsoft)"
Write-Host "‚Ä¢ MICROSOFT_CLIENT_SECRET"
Write-Host "‚Ä¢ MICROSOFT_TENANT_ID"
Write-Host "‚Ä¢ WHATSAPP_VERIFY_TOKEN (pour WhatsApp Business)"
Write-Host "‚Ä¢ WHATSAPP_ACCESS_TOKEN"
Write-Host ""

Write-Host "üöÄ PROCHAINES √âTAPES:" -ForegroundColor Green
Write-Host "1. V√©rifiez les secrets sur: https://github.com/$GitHubRepo/settings/secrets/actions"
Write-Host "2. Ajoutez les secrets optionnels si n√©cessaire"
Write-Host "3. Poussez votre code pour d√©clencher le premier d√©ploiement:"
Write-Host "   git add ."
Write-Host "   git commit -m 'üöÄ Configure GitHub Actions deployment'"
Write-Host "   git push origin main"
Write-Host ""
Write-Host "4. Surveillez le d√©ploiement: https://github.com/$GitHubRepo/actions"
Write-Host ""

Write-Host "üéâ Configuration termin√©e avec succ√®s!" -ForegroundColor Green

# Sauvegarder les informations importantes
$reportFile = "github-actions-setup-report.txt"
@"
Kawoukeravore - Rapport de Configuration GitHub Actions
======================================================
Date: $(Get-Date)
Resource Group: $ResourceGroupName
Service Principal: $spName
Static Web App: $swaName
Subscription ID: $AzureSubscriptionId

Service Principal Credentials:
$spCredentials

URLs importantes:
- GitHub Actions: https://github.com/$GitHubRepo/actions
- GitHub Secrets: https://github.com/$GitHubRepo/settings/secrets/actions
- Azure Portal: https://portal.azure.com/#@/resource/subscriptions/$AzureSubscriptionId/resourceGroups/$ResourceGroupName

Prochaines √©tapes:
1. Ajouter les secrets optionnels dans GitHub si n√©cessaire
2. Pousser le code pour d√©clencher le premier d√©ploiement
3. Configurer le domaine personnalis√© kawoukeravore.top
"@ | Out-File -FilePath $reportFile -Encoding UTF8

Write-Host "üìÑ Rapport sauvegard√© dans: $reportFile" -ForegroundColor Cyan